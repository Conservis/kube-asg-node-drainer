#!/bin/bash -xe
metadata() { curl -s -S -f http://169.254.169.254/2016-09-02/"$1"; }
asg()      { aws --region="${REGION}" autoscaling "$@"; }

REGION=$(metadata dynamic/instance-identity/document | jq -r .region)
POD_NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
[ -n "${REGION}" ]

# Not customizable, for now
POLL_INTERVAL=10

# Keeps a comma-separated list of instances that need to be drained. Sets '-'
# to force the ConfigMap to be updated in the first iteration.
instances_to_drain='-'

# Instance termination detection loop
while sleep ${POLL_INTERVAL}; do
  # get EC2 instance ids for all nodes in cluster
  INSTANCE_IDS=$(kubectl get nodes -o json | jq -r '[.items[].spec.providerID | split("/")[4]] | unique | join(",")')

  # Fetch the list of instances being terminated by their respective ASGs
  updated_instances_to_drain=$(asg describe-auto-scaling-groups | jq --arg INSTANCE_IDS "$INSTANCE_IDS" -r '[.AutoScalingGroups[].Instances[] | select((.LifecycleState == "Terminating:Wait" and .InstanceId as $a | $INSTANCE_IDS | index($a))) | .InstanceId] | sort | join(",")')

  # Have things changed since last iteration?
  if [ "${updated_instances_to_drain}" == "${instances_to_drain}" ]; then
    continue
  fi
  instances_to_drain="${updated_instances_to_drain}"

  # Update ConfigMap to reflect current ASG state
  echo "{\"apiVersion\": \"v1\", \"kind\": \"ConfigMap\", \"metadata\": {\"name\": \"kube-node-drainer-status\"}, \"data\": {\"asg\": \"${instances_to_drain}\"}}" | kubectl -n ${POD_NAMESPACE} apply -f -
done
